# https://github.com/changesets/action
name: Release Workflow
on:
  push:
    branches:
      - main
concurrency: ${{ github.workflow }}-${{ github.ref }}
jobs:
  release:
    name: Release Job
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
        with:
          fetch-depth: 0
      - name: Setup Node.js 20
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: 22
      # setup pnpm
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          run_install: false
      # get cache
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      # install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: create npmrc step
        run: |
          cat << EOF > .npmrc "$HOME/.npmrc" //registry.npmjs.org/:_authToken=$NPM_TOKEN EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      # create release pull request
      # this action will create a pull request with all the changesets if there are any in the base branch
      # else it will publish if specified
      - name: Create Release Pull Request step
        uses: changesets/action@v1
        with:
          commit: 'chore: update versions'
          title: 'chore: update versions'
          # publish: pnpm ci:publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # print environment info
      - name: Print Environment Info step
        run: npx nx report
        shell: bash
      # publish release
      # example 1
      - name: Publish packages
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: npx nx release publish
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
      # example 2
      # - name: Publish Release step
      #   if: steps.changesets.outputs.hasChangesets == 'false'
      #   run: echo "publishing"
      #   # run: pnpm ci:publish
      #   # run: nx release publish
      #   # NX   Running target nx-release-publish for 3 projects:
      # notify
      - name: Send a Slack notification if a publish happens step
        if: steps.changesets.outputs.published == 'true'
        # You can do something when a publish happens.
        # also have access to the published packages
        # steps.changesets.outputs.publishedPackages == [{"name": "@xx/xx", "version": "1.2.0"}, {"name": "@xx/xy", "version": "0.8.9"}]
        run: echo "A new version of ${GITHUB_REPOSITORY} was published!"
        # my-slack-bot send-notification --message "A new version of
        # ${GITHUB_REPOSITORY} was published!"
